const char* read_symbol_str() {
    struct buffer* buffer = buffer_create();
    char c = peekc();
    if (c != EOF && (c == '{'  || c == '}'  || c == ':'  || c == ';'  || c == '#'  || c == '\\' || c == ']'  || c == ')')){
        buffer_write(buffer, c);
        nextc();
        if (c == ')'){
            lex_finish_expression();
        }
        
        // Finaliza a string.
        buffer_write(buffer, 0x00);
    
        printf("Token: %s\n", buffer->data);
        // Retorna o ponteiro para o buffer.
        return buffer_ptr(buffer);
    }
    return NULL;
}

unsigned long long read_symbol() {
    const char* s = read_symbol_str();
    return atoll(s);
}

struct token* token_make_symbol_for_value(unsigned long symbol) {
    return token_create(&(struct token){.type = TOKEN_TYPE_SYMBOL, .llnum = symbol});
}
struct token* token_make_symbol() {
    return token_make_symbol_for_value(read_symbol());
}

const char* read_operator_str() {
    struct buffer* buffer = buffer_create();
    char c = peekc();
    if (c == EOF) return NULL;
    buffer_write(buffer, c);
    if (c == '('){
        lex_new_expression();
    }
    if (c == '?' || c == '^'|| c == '~'|| c == '('|| c == '['){
        nextc();
        buffer_write(buffer, 0x00);
        printf("Token: %s\n", buffer->data);
        return buffer_ptr(buffer);
    }
    char d = c;
    nextc();
    c = peekc();
    if(d == c && c != EOF){
        buffer_write(buffer, c);
        if (c == '*'){
            d = c;
            nextc();
            c = peekc();
            if (c == '*' && c != EOF){
                buffer_write(buffer, c);
                nextc();
                buffer_write(buffer, 0x00);
                printf("Token: %s\n", buffer->data);
                return buffer_ptr(buffer);
            }
        }
        printf("Token: %s\n", buffer->data);
        nextc();
        buffer_write(buffer, 0x00);
        return buffer_ptr(buffer);

    }else if((d == '+' || d == '-'|| d == '*'|| d == '/'|| d == '!'|| d == '>'|| d == '<'|| d == '%') && c == '='){
        buffer_write(buffer, c);
        nextc();
        printf("Token: %s\n", buffer->data);
        buffer_write(buffer, 0x00);
        return buffer_ptr(buffer);
    }else{
        printf("Token: %s\n", buffer->data);
        buffer_write(buffer, 0x00);
        return buffer_ptr(buffer);
    }
    return NULL;
}

struct token* token_make_operator_for_value(const char* op) {
    return token_create(&(struct token){.type = TOKEN_TYPE_OPERATOR});
}

struct token* token_make_operator() {
    const char* op = read_operator_str();
    return token_make_operator_for_value(op);
}
